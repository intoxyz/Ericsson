package com.ericsson.contextpush;

import java.util.ArrayList;
import java.util.List;

import android.app.AlertDialog;
import android.content.DialogInterface;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Paint;
import android.graphics.Point;
import android.graphics.RectF;
import android.graphics.drawable.Drawable;
import android.location.Criteria;
import android.location.Location;
import android.location.LocationListener;
import android.location.LocationManager;
import android.location.LocationProvider;
import android.os.Bundle;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.RelativeLayout;
import android.widget.TextView;
import android.widget.Toast;

import com.google.android.maps.GeoPoint;
import com.google.android.maps.ItemizedOverlay;
import com.google.android.maps.MapView;
import com.google.android.maps.MapActivity;
import com.google.android.maps.MapController;
import com.google.android.maps.MyLocationOverlay;
import com.google.android.maps.Overlay;
import com.google.android.maps.OverlayItem;

public class CopyOfMaplableActivity extends MapActivity implements LocationListener {
	 MapView mapView;
	 MapController mControl;
	 MyLocationOverlay mLocaOverlay;

	 String locationProvider;
	 LocationManager lm;
	 Location location;
	 int latitude, longitude;
	 
	 private ImageView mhomeCheck, mworkCheck, motherCheck, mIcnhomeMore, mIcnworkMore, mIcnotherMore;
	
	 
	/** Called when the activity is first created. */
	    public void onCreate(Bundle savedInstanceState) {
	        super.onCreate(savedInstanceState);
	        setContentView(R.layout.maplableactivity);
	        
	        //mapView
	        mapView = (MapView) findViewById(R.id.mapview);
	        mapView.setBuiltInZoomControls(true);
	        mapView.setSatellite(false);
	        
	        //set the default location (CMU Pittsburgh) 40.445379,-79.941173
	        GeoPoint gPoint=new GeoPoint((int)(40.445379*1E6), (int)(-79.941173*1E6));
	        mControl=mapView.getController();
	        mControl.setCenter(gPoint);
	        mControl.setZoom(16);
	        
	        mLocaOverlay  = new MyLocationOverlay(this, mapView);
	        mLocaOverlay.enableMyLocation();
	    
	        mLocaOverlay.runOnFirstFix(new Runnable() {
	        	  
	        	   @Override
	        	   public void run() {
	        		   mControl.animateTo(mLocaOverlay.getMyLocation()); // move to current point
	        	    													//myoverlay.getMyLocation() is a geoPoint
	        	   }
	        });
	        	    
	        mapView.getOverlays().add(mLocaOverlay);
	        
	        //policy viwe
	        findViewById(R.id.icnhomemore).setOnClickListener(mClickListener);
	        findViewById(R.id.icnworkmore).setOnClickListener(mClickListener);
	        
	        
	        mIcnhomeMore = (ImageView)findViewById(R.id.icnhomemore);
	        mIcnworkMore = (ImageView)findViewById(R.id.icnworkmore);
	        
	        Drawable marker=getResources().getDrawable(R.drawable.point);
	        
	        marker.setBounds(0, 0, marker.getIntrinsicWidth(),
	                                marker.getIntrinsicHeight());
	        
	        mapView.getOverlays().add(new SitesOverlay(marker));
	        
	        mLocaOverlay=new MyLocationOverlay(this, mapView);
	        mapView.getOverlays().add(mLocaOverlay);
	        
	    }

	@Override
	protected boolean isRouteDisplayed() {
		// TODO Auto-generated method stub
		return false;
	}   
	
	@Override
	protected void onResume() {
		super.onResume();
		
		if(mLocaOverlay==null){
			mLocaOverlay = new MyLocationOverlay(this, mapView);
		}
		mLocaOverlay.enableMyLocation();
		
		lm = (LocationManager)getSystemService(LOCATION_SERVICE);
		Location loc = lm.getLastKnownLocation(LocationManager.GPS_PROVIDER);
		
		if(loc!=null){
			onLocationChanged(loc);
		}
		
		lm.requestLocationUpdates(LocationManager.GPS_PROVIDER, 3000, 1, this);
	}

	@Override
	protected void onPause() {
		super.onPause();
		
		if(mLocaOverlay!=null){
			mLocaOverlay.disableMyLocation(); // no more update
		}
		
		lm.removeUpdates((LocationListener) this);
	}
	
	 public void onLocationChanged(Location location) {
		 int latitud = (int) (location.getLatitude()*1000000);
		 int longitude=(int)(location.getLongitude()*1000000);
		 
		 mapView.removeAllViews(); 
  
		 GeoPoint geopoint = new GeoPoint(latitud, longitude);
		 mControl.setZoom(16);
		 mControl.animateTo(geopoint);
  
	 }

	@Override
	public void onProviderDisabled(String arg0) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void onProviderEnabled(String arg0) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void onStatusChanged(String arg0, int arg1, Bundle arg2) {
		// TODO Auto-generated method stub
		
	}
	
	ImageView.OnClickListener mClickListener = new View.OnClickListener() {
    	
		public void onClick(View v) {
						
			switch (v.getId()){
				case R.id.icnhomemore:
					popPolicySetting("Home");
					break;
				
				case R.id.icnworkmore:
					popPolicySetting("Work");
					break;
			}
		}
	};
	
	private GeoPoint getPoint(double lat, double lon) {
		return(new GeoPoint((int)(lat*1000000.0), (int)(lon*1000000.0)));
	}
	
	private class SitesOverlay extends ItemizedOverlay<OverlayItem> {
		private List<OverlayItem> items=new ArrayList<OverlayItem>();
	    private Drawable marker=null;
	    private PopupPanel panel=new PopupPanel(R.layout.popup);
	    
	    public SitesOverlay(Drawable marker) {
	    	super(marker);
	    	this.marker=marker;
	      
	    	items.add(new OverlayItem(getPoint(40.748963847316034,
	    										-73.96807193756104),
	    										"UN", "United Nations"));
	    	items.add(new OverlayItem(getPoint(40.76866299974387,
	    										-73.98268461227417),
	    										"Lincoln Center",
	    										"Home of Jazz at Lincoln Center"));
	    	items.add(new OverlayItem(getPoint(40.765136435316755,
	    										-73.97989511489868),
	    										"Carnegie Hall",
	    										"Where you go with practice, practice, practice"));
	    	items.add(new OverlayItem(getPoint(40.70686417491799,
	    										-74.01572942733765),
	    										"The Downtown Club",
	    										"Original home of the Heisman Trophy"));
	    	populate();
	    }
	    
	    @Override
	    protected OverlayItem createItem(int i) {
	      return(items.get(i));
	    }
	    
	    @Override
	    public void draw(Canvas canvas, MapView mapView,
	                      boolean shadow) {
	      super.draw(canvas, mapView, shadow);
	      
	      boundCenterBottom(marker);
	    }
	    
	    @Override
	    protected boolean onTap(int i) {
	      OverlayItem item=getItem(i);
	      GeoPoint geo=item.getPoint();
	      Point pt=mapView.getProjection().toPixels(geo, null);
	      
	      View view=panel.getView();
	      
	      ((TextView)view.findViewById(R.id.latitude))
	        .setText(String.valueOf(geo.getLatitudeE6()/1000000.0));
	      ((TextView)view.findViewById(R.id.longitude))
	        .setText(String.valueOf(geo.getLongitudeE6()/1000000.0));
	      ((TextView)view.findViewById(R.id.x))
	                              .setText(String.valueOf(pt.x));
	      ((TextView)view.findViewById(R.id.y))
	                              .setText(String.valueOf(pt.y));
	      
	      panel.show(pt.y*2>mapView.getHeight());
	      
	      return(true);
	    }
	    
	    @Override
	    public int size() {
	      return(items.size());
	    }
	  }
	    
	class PopupPanel {
		View popup;
		boolean isVisible=false;
    
		PopupPanel(int layout) {
			ViewGroup parent=(ViewGroup)mapView.getParent();

			popup=getLayoutInflater().inflate(layout, parent, false);  
			popup.setOnClickListener(new View.OnClickListener() {
				
				public void onClick(View v) {
					hide();
				}
			});
		}
    
	    View getView() {
	      return(popup);
	    }
    
	    void show(boolean alignTop) {
	    	RelativeLayout.LayoutParams lp=new RelativeLayout.LayoutParams(
	    			RelativeLayout.LayoutParams.WRAP_CONTENT,
	    			RelativeLayout.LayoutParams.WRAP_CONTENT
	    	);
	      
	    	if (alignTop) {
	    		lp.addRule(RelativeLayout.ALIGN_PARENT_TOP);
	    		lp.setMargins(0, 20, 0, 0);
	    	}
	    	else {
	    		lp.addRule(RelativeLayout.ALIGN_PARENT_BOTTOM);
	    		lp.setMargins(0, 0, 0, 60);
	    	}
	      
	    	hide();
	      
	    	((ViewGroup)mapView.getParent()).addView(popup, lp);
	    	isVisible=true;
		}
	    
	    void hide() {
	    	if (isVisible) {
	    		isVisible=false;
	    		((ViewGroup)popup.getParent()).removeView(popup);
	    	}
		}
	}
	
	public void popPolicySetting(String place){

		LayoutInflater inflater = (LayoutInflater)getApplicationContext().getSystemService(LAYOUT_INFLATER_SERVICE);
        final View layout = inflater.inflate(R.layout.policysetting, (ViewGroup)findViewById(R.id.checkBox1));
        
        AlertDialog.Builder aDialog = new AlertDialog.Builder(CopyOfMaplableActivity.this);
        aDialog.setTitle("Policy Setting" + " "+ place);
        aDialog.setView(layout);
       
        aDialog.setPositiveButton("SAVE", new DialogInterface.OnClickListener() {
   
	           @Override
	           public void onClick(DialogInterface dialog, int which) {	
	        	   return;
	           }
	    });
       
        aDialog.setNegativeButton("BACK", new DialogInterface.OnClickListener() {
   
	           @Override
	           public void onClick(DialogInterface dialog, int which) {
	        	   return;    
	           }
	    });
       
        AlertDialog ad = aDialog.create();
        ad.show();
		
	}
	

}