package com.ericsson.contextpush;

import static com.ericsson.contextpush.CommonUtilities.SENDER_ID;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;

import org.json.JSONException;
import org.json.JSONObject;

import com.ericsson.contextpush.R;
import com.google.android.gcm.GCMRegistrar;
import com.loopj.android.http.AsyncHttpClient;
import com.loopj.android.http.JsonHttpResponseHandler;
import com.loopj.android.http.RequestParams;

import android.net.Uri;
import android.os.Bundle;
import android.os.Environment;
import android.os.Handler;
import android.accounts.Account;
import android.accounts.AccountManager;
import android.app.Activity;
import android.app.ProgressDialog;
import android.content.ActivityNotFoundException;
import android.content.Intent;
import android.telephony.TelephonyManager;
import android.text.Html;
import android.text.method.LinkMovementMethod;
import android.util.Log;
import android.view.Menu;
import android.view.View;
import android.webkit.MimeTypeMap;
import android.widget.Button;
import android.widget.EditText;
import android.widget.TextView;
import android.widget.Toast;

public class CopyOfMainActivity extends Activity {
	
	private String LOG_TAG = "** Mainaivity Regista **";
	private TextView mDisplay, mtextStart;
	private EditText mPhoneField, mEmailField;
	private String msgfromURL;
	private ProgressDialog mProgressDialog;
	private Button startBtn, subBtn, unsubBtn;
	private Handler mHandler;
	private String defaultPhoneNum, defaultEmailAdd;

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        
        findViewById(R.id.Subscription).setOnClickListener(mClickListener);
        findViewById(R.id.UnSubscription).setOnClickListener(mClickListener);
        findViewById(R.id.Mime).setOnClickListener(mClickListener);
        
        startBtn = (Button)findViewById(R.id.Mime);
        subBtn = (Button)findViewById(R.id.Subscription);
        unsubBtn = (Button)findViewById(R.id.UnSubscription);
        mtextStart = (TextView)findViewById(R.id.textView1);
        mDisplay = (TextView)findViewById(R.id.textView4);
        mPhoneField = (EditText)findViewById(R.id.phoneNum);
        mEmailField = (EditText)findViewById(R.id.emailAdd);

        msgfromURL = com.ericsson.contextpush.GCMIntentService.gcm_msg;
    	
        checkNotNull(SENDER_ID, "SENDER_ID");
        defaultPhoneNum = fetchPhoneNum();
        defaultEmailAdd = fetchEmailAdd();
        
        mPhoneField.setText(defaultPhoneNum);
        mEmailField.setText(defaultEmailAdd);
        

        //Will cause an error if the device doesn't support Google API 
        GCMRegistrar.checkDevice(getApplicationContext());
        GCMRegistrar.checkManifest(getApplicationContext());
        
        final String regId = GCMRegistrar.getRegistrationId(this);
        
        if (regId.equals("")) {
        	//only Sub button enabled
        	startBtn.setEnabled(false);
        	unsubBtn.setEnabled(false);
        	subBtn.setEnabled(true);
        	mDisplay.setText("You have to subscribe first to start the Demo");
        	mtextStart.setText("Put your Cellphone number and Click Subscribe");	
        	unsubBtn.setVisibility(View.INVISIBLE);
        }
        else{
        	//only UnSub button enabled
        	if(msgfromURL == null){
        		mtextStart.setText("Wait for Push Notification");	
        		startBtn.setEnabled(false);
        	}
        	else{
        		mtextStart.setText("Click Start button to start the Demo");
        		startBtn.setEnabled(true);
        	}
        	
        	mPhoneField.setEnabled(false);
			mEmailField.setEnabled(false);
        	unsubBtn.setEnabled(true);
        	subBtn.setEnabled(false);
        	//mDisplay.setText("Your number has already registered "+regId); 
        	mDisplay.setText("Your number has already registered"); 
        	
        	if(sendnstoreID(regId)){
        		Log.d(LOG_TAG, "Send regId successfully");
        	}
        	else{
        		Log.d(LOG_TAG, "Send regId error");
        	}
        }
        // For test purpose 
        startBtn.setEnabled(true);
    }
    
    Button.OnClickListener mClickListener = new View.OnClickListener() {
    	
		public void onClick(View v) {
						
			switch (v.getId()){
				case R.id.Subscription:
					getRegID();
					mtextStart.setText("Wait Until the Push request has arrived");
					mPhoneField.setEnabled(false);
					mEmailField.setEnabled(false);
					
					subBtn.setVisibility(View.INVISIBLE);
					unsubBtn.setVisibility(View.VISIBLE);
					
					infoStore();
					break;
				case R.id.UnSubscription:
					dismissRedID();
					subBtn.setVisibility(View.VISIBLE);
					unsubBtn.setVisibility(View.INVISIBLE);
		        	mPhoneField.setEnabled(true);
					mEmailField.setEnabled(true);
					break;
				case R.id.Mime:
					//mimetypeFilter(msgfromURL);
					//mtextStart.setText(Html.fromHtml("<a href = '"+msgfromURL+"'> test</a>"));
					//mtextStart.setMovementMethod(LinkMovementMethod.getInstance());
					
					//sprint 1
					//Uri uri = Uri.parse( msgfromURL );
					//startActivity( new Intent( Intent.ACTION_VIEW, uri ));
					//msgfromURL = null;
					
					Intent intent = new Intent(getApplicationContext(),MaplableActivity.class);
					startActivity(intent);
					
			}
		}
	};
	
	private void infoStore(){
		
        String sdPath, savePath, fileName;
        
		//Check status of SD CARD
        String externalState = Environment.getExternalStorageState();
        if(externalState.equals(Environment.MEDIA_MOUNTED)){
        //SD CARD READY(mounted)
        	sdPath = Environment.getExternalStorageDirectory().getAbsolutePath();
        }else{
        //SD CARD NOT READY(unmounted)
        	sdPath=Environment.MEDIA_UNMOUNTED;
        }
        
        fileName = "/userinfo.txt";
		
        File file = new File(sdPath+fileName);
        String phoneNum = (String)mPhoneField.getText().toString();
        String emailAdd = (String)mEmailField.getText().toString();
        
        String contents = phoneNum+"   "+emailAdd;
 
        FileOutputStream fos = null;
 
        try { 
            fos = new FileOutputStream(file); 
            fos.write((contents).getBytes()); 
            fos.close(); 
 
        } catch (IOException e) {
            e.printStackTrace();
        }
	}
	
	private String fetchPhoneNum(){
		
		TelephonyManager manager = (TelephonyManager) getSystemService(TELEPHONY_SERVICE);
		String phoneNum = manager.getLine1Number();
		
		return phoneNum;
	}
	
	private String fetchEmailAdd(){
		String emailAdd = null;
		
        AccountManager Am = AccountManager.get(this);
        Account[] accts = Am.getAccounts();
        final int count = accts.length;
        Account acct = null;
             
        for(int i=0;i<count;i++) {
           acct = accts[i];
           Log.d(LOG_TAG, "Account - name="+acct.name+", type="+acct.type);
           if(acct.type.equals("com.google")){
        	   emailAdd = acct.name;
           }
        }      
		
		return emailAdd;		
	}
	
	//fetch the mime file locally
	private void mimetypeFilter(String msgfromURL){
		
		//For Mime Type
        String sdPath, savePath, fileName;
        
		//Check status of SD CARD
        String externalState = Environment.getExternalStorageState();
        if(externalState.equals(Environment.MEDIA_MOUNTED)){
        //SD CARD READY(mounted)
        	sdPath = Environment.getExternalStorageDirectory().getAbsolutePath();
        }else{
        //SD CARD NOT READY(unmounted)
        	sdPath=Environment.MEDIA_UNMOUNTED;
        }

        savePath = sdPath;
//    	fileName = "/img2.jpg";
    	fileName = "/sym9.m4a";
        
		File file = new File(savePath + fileName); // ex) /mnt/sdcard/img2.jpg
		
		if (file.exists()) {
			MimeTypeMap mtm = MimeTypeMap.getSingleton(); // mime type extraction
			
			String fileExtension = fileName.substring(fileName.lastIndexOf(".") + 1, fileName.length()).toLowerCase(); // 파일 확장자 추출
			
			String mimeType = mtm.getMimeTypeFromExtension(fileExtension); // mime type extraction with file type extension
			
			 
			if (mimeType != null) {
				Intent intent = new Intent();
				intent.setAction(Intent.ACTION_VIEW);
				intent.setDataAndType(Uri.fromFile(file), mimeType);
				try {
					startActivity(intent);
				} catch (ActivityNotFoundException ane) {
					Toast.makeText(CopyOfMainActivity.this, "File type not supported", Toast.LENGTH_SHORT).show();
				}
			} else {
				Toast.makeText(CopyOfMainActivity.this, "File type not supported", Toast.LENGTH_SHORT).show();
			}
		} else {
			Toast.makeText(CopyOfMainActivity.this, "File not existed", Toast.LENGTH_SHORT).show();
		}		
		
	}
	
    private void getRegID(){
		GCMRegistrar.register(this, SENDER_ID);
		
		mHandler = new Handler(); 
    	
    	runOnUiThread(new Runnable(){
    		@Override
            public void run()
            {
                mProgressDialog = ProgressDialog.show(CopyOfMainActivity.this,"",
                        "Registration in Progress",true);
                mHandler.postDelayed( new Runnable()
                {
                    @Override
                    public void run()
                    {
                        try
                        {
                            if (mProgressDialog!=null&&mProgressDialog.isShowing()){
                                mProgressDialog.dismiss();
                            }
                        }
                        catch ( Exception e )
                        {
                            e.printStackTrace();
                        }
                    }
                }, 4000);
            }    		    		
    	});
    	// Waiting for the server response and then check
    	mHandler.postDelayed(new Runnable() { 
             public void run() { 
            	 if(GCMRegistrar.isRegistered(CopyOfMainActivity.this)){
            			mDisplay.setText("This device is registered");
            			mtextStart.setText("Wait for the Push Notification");
            	    	unsubBtn.setEnabled(true);
            	    	subBtn.setEnabled(false);
            	 }
            	 else{
	         			mDisplay.setText("Registration failed");
	         			mtextStart.setText("Try to Subscribe Again");
            	 }
             } 
        }, 3000); 

    }
    private void dismissRedID(){
    	
        GCMRegistrar.unregister(this);
        
		mHandler = new Handler(); 
    	
    	runOnUiThread(new Runnable(){
    		@Override
            public void run()
            {
                mProgressDialog = ProgressDialog.show(CopyOfMainActivity.this,"",
                        "UnRegistration in Progress",true);
                mHandler.postDelayed( new Runnable()
                {
                    @Override
                    public void run()
                    {
                        try
                        {
                            if (mProgressDialog!=null&&mProgressDialog.isShowing()){
                                mProgressDialog.dismiss();
                            }
                        }
                        catch ( Exception e )
                        {
                            e.printStackTrace();
                        }
                    }
                }, 4000);
            }    		    		
    	});
    	
    	mHandler.postDelayed(new Runnable() { 
             public void run() { 
            	 //if(com.gemalto.android.pivandroid.GCMIntentService.checkId == null){
            	 if(!GCMRegistrar.isRegistered(CopyOfMainActivity.this)){
	         	        mDisplay.setText("This device has unregistered");
	         	        mtextStart.setText("You have to register first to start Demo");
	         	    	unsubBtn.setEnabled(false);
	         	    	subBtn.setEnabled(true);
            	 }
            	 else{
	                 	mDisplay.setText("Unregistration failed");
	                 	mtextStart.setText("Try to UnSubscribe Again");
            	 }
             } 
        }, 3000); 

    }
    
    private void checkNotNull(Object reference, String name){
    	if(reference == null){
    		throw new NullPointerException(
    				getString(R.string.error_config, name));
    	}
    }
    
	public boolean sendnstoreID(String regid){
		
		String Server_URL = "";
				
    	try{
    		AsyncHttpClient client = new AsyncHttpClient();
    		
    		RequestParams param = new RequestParams();
    		param.put("regid", regid);

    		client.get(Server_URL, param, new JsonHttpResponseHandler() {
    			
    		    @Override
    		    public void onSuccess(JSONObject response) {
    		    	
    		        try {
						Boolean res = response.getBoolean("success");
						
						if (res.booleanValue()) {
							
						}
					} catch (JSONException e) {
						e.printStackTrace();
					}
    		        
    		    }
    		});
            
        }catch(Exception e){
            Log.d("execption", "server error", e);
        } 	
        
        return true;
	}
    
    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        getMenuInflater().inflate(R.menu.activity_main, menu);
        return true;
    }
    
}
